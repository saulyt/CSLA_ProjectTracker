@page "/account/login"
@using System.Security.Claims
@using ProjectTracker.Library.Security
@using Csla
@inject Csla.Blazor.ViewModel<Credentials> vm
@inject Csla.Blazor.Client.Authentication.CslaUserService userService
@inject NavigationManager NavigationManager

<h1>Login</h1>

<p class="text-danger">@vm.ViewModelErrorText</p>
<p class="text-danger">@ErrorText</p>

@if (vm.Model == null)
{
  <p>Loading...</p>
}
else
{
  <table class="table">
    <thead>
      <tr>
        <th></th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <TextInputRow Property="vm.GetPropertyInfo(() => vm.Model.Username)" />
      <TextInputRow Property="vm.GetPropertyInfo(() => vm.Model.Password)" InputType="password" />
    </tbody>
  </table>
  <button @onclick="LoginUser" disabled="@(!vm.Model.IsSavable)">Login</button>
  <p class="text-info">
    Use username/password 'manager' or 'admin'.
  </p>
}

@code {
    public string ErrorText { get; set; }

    protected override void OnInitialized()
    {
      vm.ModelPropertyChanged += async (s, e) =>
        await InvokeAsync(() => StateHasChanged());
    }

    protected override async Task OnParametersSetAsync()
    {
      await vm.RefreshAsync(() => Csla.DataPortal.CreateAsync<Credentials>());
    }

    private async void LoginUser()
    {
      var validator =
        await Csla.DataPortal.FetchAsync<CredentialValidator>(vm.Model);
      var principal = validator.GetPrincipal();

      if (principal.Identity.IsAuthenticated)
      {
        userService.CurrentUser = principal;
        NavigationManager.NavigateTo("/");
      }
      else
      {
        ErrorText = "Invalid credentials";
        StateHasChanged();
      }
    }
}
